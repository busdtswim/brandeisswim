generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model lessons {
  id              Int               @id @default(autoincrement())
  meeting_days    String            @db.VarChar(255)
  max_slots       Int
  exception_dates String?
  start_time      String?           @db.VarChar(10)
  end_time        String?           @db.VarChar(10)
  start_date      String?           @db.VarChar(10)
  end_date        String?           @db.VarChar(10)
  swimmer_lessons swimmer_lessons[]
}

model swimmer_lessons {
  swimmer_id                                                       Int
  lesson_id                                                        Int
  registration_date                                                DateTime?    @default(now()) @db.Timestamptz(6)
  payment_status                                                   Boolean?     @default(false)
  instructor_id                                                    Int?
  instructor_notes                                                 String?
  preferred_instructor_id                                          Int?
  instructors_swimmer_lessons_instructor_idToinstructors           instructors? @relation("swimmer_lessons_instructor_idToinstructors", fields: [instructor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_assigned_instructor")
  instructors_swimmer_lessons_preferred_instructor_idToinstructors instructors? @relation("swimmer_lessons_preferred_instructor_idToinstructors", fields: [preferred_instructor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_preferred_instructor")
  lessons                                                          lessons      @relation(fields: [lesson_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_lesson")
  swimmers                                                         swimmers     @relation(fields: [swimmer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_swimmer")

  @@id([swimmer_id, lesson_id])
}

model swimmers {
  id              Int               @id @default(autoincrement())
  user_id         Int?
  name            String            @db.VarChar(255)
  proficiency     String?           @db.VarChar(50)
  gender          String?           @db.Char(255)
  birthdate       String?           @db.VarChar(10)
  swimmer_lessons swimmer_lessons[]
  users           users?            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  waitlist        waitlist[]
}

model instructors {
  id                                                                   Int               @id @default(autoincrement())
  name                                                                 String            @db.VarChar(255)
  email                                                                String            @unique @db.VarChar(255)
  swimmer_lessons_swimmer_lessons_instructor_idToinstructors           swimmer_lessons[] @relation("swimmer_lessons_instructor_idToinstructors")
  swimmer_lessons_swimmer_lessons_preferred_instructor_idToinstructors swimmer_lessons[] @relation("swimmer_lessons_preferred_instructor_idToinstructors")
}

model users {
  id                 Int        @id @default(autoincrement())
  email              String     @unique @db.VarChar(255)
  password           String     @db.VarChar(255)
  role               String     @db.VarChar(20)
  phone_number       String?    @db.VarChar(20)
  fullname           String?    @db.VarChar(255)
  reset_token        String?    @db.VarChar(255)
  reset_token_expiry DateTime?  @db.Timestamptz(6)
  swimmers           swimmers[]
}

model site_content {
  id           Int       @id @default(autoincrement())
  section      String    @unique @db.VarChar(255)
  title        String?   @db.VarChar(255)
  content      String
  is_custom    Boolean?  @default(false)
  order_num    Int?      @default(0)
  last_updated DateTime? @default(now()) @db.Timestamptz(6)
}

model waitlist {
  id                Int       @id @default(autoincrement())
  swimmer_id        Int
  registration_date DateTime? @default(now()) @db.Timestamptz(6)
  status            String?   @default("active") @db.VarChar(20)
  position          Int
  notes             String?
  swimmers          swimmers  @relation(fields: [swimmer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_swimmer")

  @@index([position], map: "idx_waitlist_position")
  @@index([status], map: "idx_waitlist_status")
  @@index([swimmer_id], map: "idx_waitlist_swimmer_id")
}
